
ELECTRICITY:
positive terminal: where current flows from
ground: where current flows to 

ETHERNET SHIELD
	http://arduino.cc/en/Reference/Ethernet

	IP  address: 192.168.1.26
		IPAddress ip(192, 168, 1, 26);
	MAC address: 00:1D:FE:EA:39:17
		byte mac[] = { 0x00, 0x1D, 0xFE, 0xEA, 0x39, 0x17 };

	TESTING
		tested with code from http://arduino.cc/en/Tutorial/ChatServer
		replaced IP and MAC addresses with appropriate values above
		uploaded the program

		telnet'ed in to snowduino
		>> telnet
		>> open 192.168.1.26
		>> whatever nonsense that I want to say
		>> ...
		>> Ctrl+] Enter //to exit

		telnet'ing back into snowduino has a problem
		each letter i type is doubled and newlines replace with ^M
		this all occurs on my command line, nothing is printed
		I believe this is because it's not a telnet server, which is another piece of sample code available

	CONTROL LED VIA WEB PAGE
		http://startingelectronics.com/tutorials/arduino/ethernet-shield-web-server-tutorial/web-server-LED-control/

		pasted code into a sketch, replaced the IP and MAC addresses and it worked
		I happened to have an LED attached to pin 2, as they did in this example

		I'm having trouble on the webpage reading the state of the button and updating the page properly.

		I found out that pin 1 is not to be used if the line Serial.begin(9600); appears in the code.  Apparently it is to be used for diagnostics?
		moving the button to pin 5 made everything work how I expected!

		refreshing breaks the system and i have to restart it.  Probably just the code doesn't handle a second connection or something, not sure.

		I've had trouble with this project and it seems that many times when I'm having trouble getting the red led to do what I expect, it's because the wiring has gone a little loose and even though the pin is HIGH, the LED doesn't turn on.  I'll need to take this into consideration, either using pin 13 or testing the LED whenever I start.  OR using other types of feedback.

		now when I visit http://192.168.1.26/ it says Connecting... and doesn't connect even though the button input affects the program.  It turns out that price was updating the router's firmware.

		It began working again and when I tried to upload a new sketchbook, it stopped responding; again it says Connecting...  I tried unplugging and replugging it in as well as reuploading many times. http://forum.arduino.cc/index.php?topic=99001.0 mentions the possibility that the declaration of the ipaddress is syntactically wrong, but it has worked before.  I tried rewriting it anyway to no avail.

		I googled around and found that someone with a similar-ish error had better luck when they tried using DHCP.  It turns out that when I use DHCP, the IP address is set to 1.10 instead of 1.26.  Maybe this was happening previously?  I was able to telnet in on the first try to 1.10.  port 80 also works it seems.

		I had some trouble working with HTTP requests because a request for the favicon is sent right after the normal request, so having an 'else' statement for when you don't find something in a request is likely to always happen in the request for the favicon.

		oh shit
		chrome tries to save time by sending an http request on URLs that I haven't even hit enter on, just when I type them into the omnibox.

		i switched to firefox to try to avoid some of this sort of problem.
		Note to self, storing large strings like HTML should be done with program memory instead of SRAM: http://www.arduino.cc/en/Reference/PROGMEM

		I learned that you can do multiline strings by putting quotes around each line. Better add \n at the end though, and escape internal quotes.  I thought i might need to delay() for more than 1 for the server to respond when it was giving me some internal server errors, but it doesn't seem to be the ticket.  
		Now I'm struggling with getting String.indexOf() to correctly detect my GET parameters

		My main problem lies with passing a string as an argument in C.  Also, checking the request for something like 'on' is falsely matching with 'Connection' in the HTTP request.

		don't try to concatenate literal strings "like"+"this" as they are character arrays.

		I reverted to passing a String around, and added a & to the parameter.  I note that doing String request = String(req) where req is the name of the parameter ended up not working.  not sure why.  But now the request is getting corrupted when it changes scope. I should investigate http://playground.arduino.cc/Code/AvailableMemory.  

		I spent a long time facing indexOf>-1 not giving me the results that I expected.  It turns out that the third of these print statements is the only one that is -1 when blinkLED is not in the request.
			  String x = "blinkLED";
		      Serial.print(request.indexOf(String("blinkLED")));
		      Serial.print(request.indexOf("blinkLED"));
		      Serial.print(request.indexOf(x));

		Actually printing out strings like 'x' in that example is giving me the empty string later on.  That's why it has been matching at location 0 instead of -1.  This has got to be a memory problem.

		(3/16)
		http://arduino.cc/en/Tutorial/Memory explains this well

		I set up a simple test for a fresh dhcp server without all the LED stuff and no fancy web page to revisit my issues with the memory limitations in mind (using PROGMEM).  Before doing anything fancy I just set up the DHCP and it was not working out.  I added Serial.println statements to debug to see when we actually connected to a client with server.available().  The program must have looped for 45 seconds before it actually started responding to http requests made from my laptop, then started working perfectly fine. ....
		After writing this down, it is no longer responding again.
		I tried with firefox (had been using chrome) and still no response, although Serial keeps printing 'loop' so I know it isn't hanging?
		I reuploaded the sketch and it is still not recognizing clients.
		I removed the loop print statement for fear that it was getting in the way of recognizing clients, but it doesn't seem to have helped.

		... is there any chance that a client is connected but sends 0 bytes?
		It does seem like if i type in a wrong IP address, firefox tells me that Firefox can't establish a connection to the server at 192.168.1.113.
		Whereas it is a 'server took too long to respond' on the correct IP address.

		http://forum.arduino.cc/index.php?topic=85342.0 seems to have some good info

		a variety of sites suggest removing the serial.print statements and serial.begin statement...
		they also suggest some lines to include if you have an SD card in the arduino.

		power issues are possible but as far as i know more likely with the wall wart than with usb power.

		** It turns out that my laptop just needed to be connected to DOTRS instead of AIAILOVESBANANAS!







MEMORY (updated 3/16)
	from http://arduino.cc/en/Tutorial/Memory

	Flash memory (program space), is where the Arduino sketch is stored.
	SRAM (static random access memory) is where the sketch creates and manipulates variables when it runs.
	EEPROM is memory space that programmers can use to store long-term information

	Flash  32k bytes (of which .5k is used for the bootloader)
	SRAM   2k bytes
	EEPROM 1k byte

	A char[] is stored in SRAM, and at 1 byte per char, it takes only 2048 to exhaust all of SRAM.
	The types of errors that you encounter when SRAM is exhausted are subtle and confusing.

	We can store static strings that don't need to be modified in flash memory which has much more space using the PROGMEM keyword

	http://www.arduino.cc/en/Reference/PROGMEM shows an example program that uses the PROGMEM keyword.  Testing it has shown me that the sizes of the strings stored in PROGMEM do take up a byte per character in the program memory space.  With small strings the binary sketch size is about 2000/32000 bytes, and with six thousand-character strings the binary sketch size is about 8000/32000 bytes.

	main features: #include <avr/pgmspace.h> 
				   strcpy_P(destBuffer, (char*)pgm_read_word(&(progmem_string)));

	is a literal string stored as PROGMEM or in SRAM?

CODING
	const int redLedPin = 2;  //use consts to manage pin #s as variables
	const int buttonPin = 1;  
	boolean buttonState = 0;  //use variables that change as well.  INT?
	digitalWrite(redLedPin, HIGH); // turn on the red LED
	buttonState = digitalRead(buttonPin); //read the value of pin 1
	if (buttonState == HIGH){ doStuff(); } //do something about the button
	delay(1000); // wait 1 second
	* serial.begin(9600) makes pin 1 unusable by other stuff
	variables are in scope inside of methods

RESERVED PINS (updated 3/16)
	from http://arduino.cc/en/Main/ArduinoBoardEthernet
	pin 0 is used for receiving serial tty data
	pin 1 is used for sending   serial tty data
	pin 10-13 are reserved for interfacing with the Ethernet module

INSTALLING NEW LIBRARY
  navigate to the usr/share/arduino/libraries folder and copy over the library
  do this while Arduino IDE is closed
  you may have to do this with sudo